From f446a7ba21c68530d1d892bd624c7a10ffb3990f Mon Sep 17 00:00:00 2001
From: Dominggoes Isakh <drjisakh@gmail.com>
Date: Sun, 21 Sep 2025 09:47:22 -0400
Subject: [PATCH 11/15] Revert "Delete unused NetworkObserverRegistry from
 IpClientLinkObserver."

This reverts commit 6e237302b8abe17bafb8dfd857514e84708f81a4.
---
 src/android/net/ip/IpClient.java              | 18 +++++++++++----
 src/android/net/ip/IpClientLinkObserver.java  | 13 +++++++----
 .../android/server/NetworkStackService.java   | 14 ++++++++---
 .../net/ip/IpClientIntegrationTestCommon.java | 13 +++++++----
 .../unit/src/android/net/ip/IpClientTest.java | 23 +++++++++++--------
 .../networkstack/NetworkStackServiceTest.kt   | 20 ++++++++--------
 6 files changed, 65 insertions(+), 36 deletions(-)

diff --git a/src/android/net/ip/IpClient.java b/src/android/net/ip/IpClient.java
index 0c90fe60..4a8e8792 100644
--- a/src/android/net/ip/IpClient.java
+++ b/src/android/net/ip/IpClient.java
@@ -189,6 +189,7 @@ import com.android.networkstack.metrics.NetworkQuirkMetrics;
 import com.android.networkstack.packets.NeighborAdvertisement;
 import com.android.networkstack.packets.NeighborSolicitation;
 import com.android.networkstack.util.NetworkStackUtils;
+import com.android.server.NetworkObserverRegistry;
 import com.android.server.NetworkStackService.NetworkStackServiceManager;
 
 import java.io.File;
@@ -780,6 +781,7 @@ public class IpClient extends StateMachine {
     private final Dependencies mDependencies;
     private final ConnectivityManager mCm;
     private final INetd mNetd;
+    private final NetworkObserverRegistry mObserverRegistry;
     private final IpClientLinkObserver mLinkObserver;
     private final WakeupMessage mProvisioningTimeoutAlarm;
     private final WakeupMessage mDhcpActionTimeoutAlarm;
@@ -1021,13 +1023,14 @@ public class IpClient extends StateMachine {
     }
 
     public IpClient(Context context, String ifName, IIpClientCallbacks callback,
-            NetworkStackServiceManager nssManager) {
-        this(context, ifName, callback, nssManager, new Dependencies());
+            NetworkObserverRegistry observerRegistry, NetworkStackServiceManager nssManager) {
+        this(context, ifName, callback, observerRegistry, nssManager, new Dependencies());
     }
 
     @VisibleForTesting
     public IpClient(Context context, String ifName, IIpClientCallbacks callback,
-            NetworkStackServiceManager nssManager, Dependencies deps) {
+            NetworkObserverRegistry observerRegistry, NetworkStackServiceManager nssManager,
+            Dependencies deps) {
         super(IpClient.class.getSimpleName() + "." + ifName);
         Objects.requireNonNull(ifName);
         Objects.requireNonNull(callback);
@@ -1042,6 +1045,7 @@ public class IpClient extends StateMachine {
         mMetricsLog = deps.getIpConnectivityLog();
         mNetworkQuirkMetrics = deps.getNetworkQuirkMetrics();
         mCm = mContext.getSystemService(ConnectivityManager.class);
+        mObserverRegistry = observerRegistry;
         mIpMemoryStore = deps.getIpMemoryStore(context, nssManager);
 
         sSmLogs.putIfAbsent(mInterfaceName, new SharedLog(MAX_LOG_RECORDS, mTag));
@@ -1111,8 +1115,10 @@ public class IpClient extends StateMachine {
                     public void onIpv6AddressRemoved(final Inet6Address address) {
                         // The update of Gratuitous NA target addresses set or unsolicited
                         // multicast NS source addresses set should be only accessed from the
-                        // handler thread of IpClient StateMachine. This can be done by either
-                        // sending a message to StateMachine or posting a handler.
+                        // handler thread of IpClient StateMachine, keeping the behaviour
+                        // consistent with relying on the non-blocking NetworkObserver callbacks,
+                        // see {@link registerObserverForNonblockingCallback}. This can be done
+                        // by either sending a message to StateMachine or posting a handler.
                         if (address.isLinkLocalAddress()) return;
                         getHandler().post(() -> {
                             mLog.log("Remove IPv6 GUA " + address
@@ -1284,9 +1290,11 @@ public class IpClient extends StateMachine {
     }
 
     private void startStateMachineUpdaters() {
+        mObserverRegistry.registerObserverForNonblockingCallback(mLinkObserver);
     }
 
     private void stopStateMachineUpdaters() {
+        mObserverRegistry.unregisterObserver(mLinkObserver);
         mLinkObserver.clearInterfaceParams();
         mLinkObserver.shutdown();
     }
diff --git a/src/android/net/ip/IpClientLinkObserver.java b/src/android/net/ip/IpClientLinkObserver.java
index e1a192e6..5e57e88b 100644
--- a/src/android/net/ip/IpClientLinkObserver.java
+++ b/src/android/net/ip/IpClientLinkObserver.java
@@ -64,6 +64,7 @@ import com.android.net.module.util.netlink.StructNdOptPref64;
 import com.android.net.module.util.netlink.StructNdOptRdnss;
 import com.android.networkstack.apishim.NetworkInformationShimImpl;
 import com.android.networkstack.apishim.common.NetworkInformationShim;
+import com.android.server.NetworkObserver;
 
 import java.net.Inet6Address;
 import java.net.InetAddress;
@@ -78,9 +79,10 @@ import java.util.concurrent.TimeUnit;
 /**
  * Keeps track of link configuration received from Netd.
  *
- * An instance of this class is constructed by passing in an interface name and a callback. When
- * the class receives update notifications, it applies the update to its local LinkProperties, and
- * if something has changed, notifies its owner of the update via the callback.
+ * An instance of this class is constructed by passing in an interface name and a callback. The
+ * owner is then responsible for registering the tracker with NetworkObserverRegistry. When the
+ * class receives update notifications, it applies the update to its local LinkProperties, and if
+ * something has changed, notifies its owner of the update via the callback.
  *
  * The owner can then call {@code getLinkProperties()} in order to find out
  * what changed. If in the meantime the LinkProperties stored here have changed,
@@ -93,15 +95,18 @@ import java.util.concurrent.TimeUnit;
  *
  * - The owner of this class is expected to create it, register it, and call
  *   getLinkProperties or clearLinkProperties on its thread.
+ * - Most of the methods in the class are implementing NetworkObserver and are called
+ *   on the handler used to register the observer.
  * - All accesses to mLinkProperties must be synchronized(this). All the other
  *   member variables are immutable once the object is constructed.
  *
  * TODO: Now that all the methods are called on the handler thread, remove synchronization and
  *       pass the LinkProperties to the update() callback.
+ * TODO: Stop extending NetworkObserver and get events from netlink directly.
  *
  * @hide
  */
-public class IpClientLinkObserver {
+public class IpClientLinkObserver implements NetworkObserver {
     private final String mTag;
 
     /**
diff --git a/src/com/android/server/NetworkStackService.java b/src/com/android/server/NetworkStackService.java
index c145bfe1..4dd902fd 100644
--- a/src/com/android/server/NetworkStackService.java
+++ b/src/com/android/server/NetworkStackService.java
@@ -174,9 +174,9 @@ public class NetworkStackService extends Service {
         /** @see IpClient */
         @NonNull
         public IpClient makeIpClient(@NonNull Context context, @NonNull String ifName,
-                @NonNull IIpClientCallbacks cb,
+                @NonNull IIpClientCallbacks cb, @NonNull NetworkObserverRegistry observerRegistry,
                 @NonNull NetworkStackServiceManager nsServiceManager) {
-            return new IpClient(context, ifName, cb, nsServiceManager);
+            return new IpClient(context, ifName, cb, observerRegistry, nsServiceManager);
         }
     }
 
@@ -191,6 +191,7 @@ public class NetworkStackService extends Service {
         private final PermissionChecker mPermChecker;
         private final Dependencies mDeps;
         private final INetd mNetd;
+        private final NetworkObserverRegistry mObserverRegistry;
         @GuardedBy("mIpClients")
         private final ArrayList<WeakReference<IpClient>> mIpClients = new ArrayList<>();
         private final IpMemoryStoreService mIpMemoryStoreService;
@@ -288,6 +289,7 @@ public class NetworkStackService extends Service {
             mDeps = deps;
             mNetd = INetd.Stub.asInterface(
                     (IBinder) context.getSystemService(Context.NETD_SERVICE));
+            mObserverRegistry = new NetworkObserverRegistry();
             mIpMemoryStoreService = mDeps.makeIpMemoryStoreService(context);
             // NetworkStackNotifier only shows notifications relevant for API level > Q
             if (ShimUtils.isReleaseOrDevelopmentApiAbove(Build.VERSION_CODES.Q)) {
@@ -310,6 +312,12 @@ public class NetworkStackService extends Service {
                 netdHash = HASH_UNKNOWN;
             }
             updateNetdAidlVersion(netdVersion, netdHash);
+
+            try {
+                mObserverRegistry.register(mNetd);
+            } catch (RemoteException e) {
+                mLog.e("Error registering observer on Netd", e);
+            }
         }
 
         private void updateNetdAidlVersion(final int version, final String hash) {
@@ -372,7 +380,7 @@ public class NetworkStackService extends Service {
             mPermChecker.enforceNetworkStackCallingPermission();
             updateNetworkStackAidlVersion(cb.getInterfaceVersion(), cb.getInterfaceHash());
             final IpClient ipClient = mDeps.makeIpClient(
-                    mContext, ifName, cb, this);
+                    mContext, ifName, cb, mObserverRegistry, this);
 
             synchronized (mIpClients) {
                 final Iterator<WeakReference<IpClient>> it = mIpClients.iterator();
diff --git a/tests/integration/common/android/net/ip/IpClientIntegrationTestCommon.java b/tests/integration/common/android/net/ip/IpClientIntegrationTestCommon.java
index 4a3825d1..7e0e731c 100644
--- a/tests/integration/common/android/net/ip/IpClientIntegrationTestCommon.java
+++ b/tests/integration/common/android/net/ip/IpClientIntegrationTestCommon.java
@@ -237,6 +237,7 @@ import com.android.networkstack.metrics.NetworkQuirkMetrics;
 import com.android.networkstack.packets.NeighborAdvertisement;
 import com.android.networkstack.packets.NeighborSolicitation;
 import com.android.networkstack.util.NetworkStackUtils;
+import com.android.server.NetworkObserverRegistry;
 import com.android.server.NetworkStackService.NetworkStackServiceManager;
 import com.android.testutils.CompatUtil;
 import com.android.testutils.DevSdkIgnoreRule;
@@ -380,6 +381,7 @@ public abstract class IpClientIntegrationTestCommon {
     @Mock private DevicePolicyManager mDevicePolicyManager;
     @Mock private PackageManager mPackageManager;
     @Spy private INetd mNetd;
+    private NetworkObserverRegistry mNetworkObserverRegistry;
 
     protected IpClient mIpc;
     protected Dependencies mDependencies;
@@ -981,8 +983,8 @@ public abstract class IpClientIntegrationTestCommon {
     }
 
     private IpClient makeIpClient() throws Exception {
-        IpClient ipc =
-                new IpClient(mContext, mIfaceName, mCb, mNetworkStackServiceManager, mDependencies);
+        IpClient ipc = new IpClient(mContext, mIfaceName, mCb, mNetworkObserverRegistry,
+                mNetworkStackServiceManager, mDependencies);
         // Wait for IpClient to enter its initial state. Otherwise, additional setup steps or tests
         // that mock IpClient's dependencies might interact with those mocks while IpClient is
         // starting. This would cause UnfinishedStubbingExceptions as mocks cannot be interacted
@@ -999,6 +1001,8 @@ public abstract class IpClientIntegrationTestCommon {
         when(mContext.getSystemService(eq(Context.NETD_SERVICE))).thenReturn(netdIBinder);
         assertNotNull(mNetd);
 
+        mNetworkObserverRegistry = new NetworkObserverRegistry();
+        mNetworkObserverRegistry.register(mNetd);
         mIpc = makeIpClient();
 
         // Tell the IpMemoryStore immediately to answer any question about network attributes with a
@@ -2470,8 +2474,9 @@ public abstract class IpClientIntegrationTestCommon {
         final String addr2 = "192.0.2.3";
         final int prefixLength = 26;
 
-        // IpClient gets IP addresses directly from netlink instead of from netd, just
-        // add the addresses directly and wait to see if IpClient has seen the address.
+        // IpClient gets IP addresses directly from netlink instead of from netd, unnecessary
+        // to rely on the NetworkObserver callbacks to confirm new added address update. Just
+        // add the addresses directly and wait to see if IpClient has seen the address
         mNetd.interfaceAddAddress(iface, addr1, prefixLength);
         mNetd.interfaceAddAddress(iface, addr2, prefixLength);
 
diff --git a/tests/unit/src/android/net/ip/IpClientTest.java b/tests/unit/src/android/net/ip/IpClientTest.java
index 3fc843e3..78833dce 100644
--- a/tests/unit/src/android/net/ip/IpClientTest.java
+++ b/tests/unit/src/android/net/ip/IpClientTest.java
@@ -105,6 +105,7 @@ import com.android.net.module.util.netlink.StructNlMsgHdr;
 import com.android.net.module.util.netlink.StructRtMsg;
 import com.android.networkstack.R;
 import com.android.networkstack.ipmemorystore.IpMemoryStoreService;
+import com.android.server.NetworkObserverRegistry;
 import com.android.server.NetworkStackService;
 import com.android.testutils.DevSdkIgnoreRule;
 import com.android.testutils.DevSdkIgnoreRule.IgnoreAfter;
@@ -176,6 +177,7 @@ public class IpClientTest {
 
     @Mock private Context mContext;
     @Mock private ConnectivityManager mCm;
+    @Mock private NetworkObserverRegistry mObserverRegistry;
     @Mock private INetd mNetd;
     @Mock private Resources mResources;
     @Mock private IIpClientCallbacks mCb;
@@ -229,8 +231,8 @@ public class IpClientTest {
 
     private IpClient makeIpClient(String ifname) throws Exception {
         setTestInterfaceParams(ifname);
-        final IpClient ipc =
-                new IpClient(mContext, ifname, mCb, mNetworkStackServiceManager, mDependencies);
+        final IpClient ipc = new IpClient(mContext, ifname, mCb, mObserverRegistry,
+                mNetworkStackServiceManager, mDependencies);
         verify(mNetd, timeout(TEST_TIMEOUT_MS).times(1)).interfaceSetEnableIPv6(ifname, false);
         verify(mNetd, timeout(TEST_TIMEOUT_MS).times(1)).interfaceClearAddrs(ifname);
         final ArgumentCaptor<INetlinkMessageProcessor> processorCaptor =
@@ -238,6 +240,7 @@ public class IpClientTest {
         verify(mDependencies).makeIpClientNetlinkMonitor(any(), any(), any(), anyInt(),
                 processorCaptor.capture());
         mNetlinkMessageProcessor = processorCaptor.getValue();
+        reset(mObserverRegistry);
         reset(mNetd);
         // Verify IpClient doesn't call onLinkPropertiesChange() when it starts.
         verify(mCb, never()).onLinkPropertiesChange(any());
@@ -357,8 +360,8 @@ public class IpClientTest {
     public void testNullInterfaceNameMostDefinitelyThrows() throws Exception {
         setTestInterfaceParams(null);
         try {
-            final IpClient ipc = new IpClient(mContext, null, mCb, mNetworkStackServiceManager,
-                    mDependencies);
+            final IpClient ipc = new IpClient(mContext, null, mCb, mObserverRegistry,
+                    mNetworkStackServiceManager, mDependencies);
             ipc.shutdown();
             fail();
         } catch (NullPointerException npe) {
@@ -371,8 +374,8 @@ public class IpClientTest {
         final String ifname = "lo";
         setTestInterfaceParams(ifname);
         try {
-            final IpClient ipc = new IpClient(mContext, ifname, null, mNetworkStackServiceManager,
-                    mDependencies);
+            final IpClient ipc = new IpClient(mContext, ifname, null, mObserverRegistry,
+                    mNetworkStackServiceManager, mDependencies);
             ipc.shutdown();
             fail();
         } catch (NullPointerException npe) {
@@ -383,8 +386,8 @@ public class IpClientTest {
     @Test
     public void testInvalidInterfaceDoesNotThrow() throws Exception {
         setTestInterfaceParams(TEST_IFNAME);
-        final IpClient ipc = new IpClient(mContext, TEST_IFNAME, mCb, mNetworkStackServiceManager,
-                mDependencies);
+        final IpClient ipc = new IpClient(mContext, TEST_IFNAME, mCb, mObserverRegistry,
+                mNetworkStackServiceManager, mDependencies);
         verifyNoMoreInteractions(mIpMemoryStore);
         ipc.shutdown();
     }
@@ -392,8 +395,8 @@ public class IpClientTest {
     @Test
     public void testInterfaceNotFoundFailsImmediately() throws Exception {
         setTestInterfaceParams(null);
-        final IpClient ipc = new IpClient(mContext, TEST_IFNAME, mCb, mNetworkStackServiceManager,
-                mDependencies);
+        final IpClient ipc = new IpClient(mContext, TEST_IFNAME, mCb, mObserverRegistry,
+                mNetworkStackServiceManager, mDependencies);
         ipc.startProvisioning(new ProvisioningConfiguration());
         verify(mCb, timeout(TEST_TIMEOUT_MS).times(1)).onProvisioningFailure(any());
         verify(mIpMemoryStore, never()).storeNetworkAttributes(any(), any(), any());
diff --git a/tests/unit/src/com/android/networkstack/NetworkStackServiceTest.kt b/tests/unit/src/com/android/networkstack/NetworkStackServiceTest.kt
index 7770eca7..4c4864be 100644
--- a/tests/unit/src/com/android/networkstack/NetworkStackServiceTest.kt
+++ b/tests/unit/src/com/android/networkstack/NetworkStackServiceTest.kt
@@ -36,22 +36,15 @@ import android.os.Process
 import androidx.test.ext.junit.runners.AndroidJUnit4
 import androidx.test.filters.SmallTest
 import com.android.net.module.util.Inet4AddressUtils.inet4AddressToIntHTH
-import com.android.networkstack.ipmemorystore.IpMemoryStoreService
 import com.android.server.NetworkStackService.Dependencies
 import com.android.server.NetworkStackService.NetworkStackConnector
 import com.android.server.NetworkStackService.PermissionChecker
 import com.android.server.connectivity.NetworkMonitor
+import com.android.networkstack.ipmemorystore.IpMemoryStoreService
 import com.android.testutils.DevSdkIgnoreRule
 import com.android.testutils.DevSdkIgnoreRule.IgnoreAfter
 import com.android.testutils.DevSdkIgnoreRule.IgnoreUpTo
 import com.android.testutils.assertThrows
-import java.io.FileDescriptor
-import java.io.PrintWriter
-import java.io.StringWriter
-import java.net.Inet4Address
-import kotlin.reflect.KVisibility
-import kotlin.reflect.full.declaredMemberFunctions
-import kotlin.test.assertEquals
 import org.junit.Rule
 import org.junit.Test
 import org.junit.runner.RunWith
@@ -63,6 +56,13 @@ import org.mockito.Mockito.mock
 import org.mockito.Mockito.spy
 import org.mockito.Mockito.times
 import org.mockito.Mockito.verify
+import java.io.FileDescriptor
+import java.io.PrintWriter
+import java.io.StringWriter
+import java.net.Inet4Address
+import kotlin.reflect.KVisibility
+import kotlin.reflect.full.declaredMemberFunctions
+import kotlin.test.assertEquals
 
 private val TEST_NETD_VERSION = 9991001
 private val TEST_NETD_HASH = "test_netd_hash"
@@ -85,7 +85,7 @@ class NetworkStackServiceTest {
         doReturn(mockDhcpServer).`when`(this).makeDhcpServer(any(), any(), any(), any())
         doReturn(mockNetworkMonitor).`when`(this).makeNetworkMonitor(any(), any(), any(), any(),
                 any())
-        doReturn(mockIpClient).`when`(this).makeIpClient(any(), any(), any(), any())
+        doReturn(mockIpClient).`when`(this).makeIpClient(any(), any(), any(), any(), any())
     }
     private val netd = mock(INetd::class.java).apply {
         doReturn(TEST_NETD_VERSION).`when`(this).interfaceVersion
@@ -195,7 +195,7 @@ class NetworkStackServiceTest {
 
         connector.makeIpClient(TEST_IFACE, mockIpClientCb)
 
-        verify(deps).makeIpClient(any(), eq(TEST_IFACE), any(), any())
+        verify(deps).makeIpClient(any(), eq(TEST_IFACE), any(), any(), any())
         verify(mockIpClientCb).onIpClientCreated(any())
 
         // Call some methods one more time with a shared version number and hash to verify no
-- 
2.45.2

