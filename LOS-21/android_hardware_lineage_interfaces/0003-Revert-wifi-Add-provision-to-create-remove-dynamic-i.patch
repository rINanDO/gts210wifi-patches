From 575673747c72922dd7116e7b014cc3b0d97b3f9e Mon Sep 17 00:00:00 2001
From: html6405 <peter.schelchshorn@mhs-solutions.at>
Date: Tue, 26 Dec 2023 16:33:06 +0100
Subject: [PATCH 03/12] Revert "wifi: Add provision to create/remove dynamic
 interface(s)."

This reverts commit 474136459420cc0699145f49076b2e328691c6ee.
---
 wifi/1.0-legacy/wifi_chip.cpp | 77 +++++++----------------------------
 wifi/1.0-legacy/wifi_chip.h   |  5 ---
 2 files changed, 15 insertions(+), 67 deletions(-)

diff --git a/wifi/1.0-legacy/wifi_chip.cpp b/wifi/1.0-legacy/wifi_chip.cpp
index 08ef368..920beb8 100644
--- a/wifi/1.0-legacy/wifi_chip.cpp
+++ b/wifi/1.0-legacy/wifi_chip.cpp
@@ -735,36 +735,7 @@ Return<void> WifiChip::getAvailableModes_1_6(getAvailableModes_1_6_cb hidl_statu
                            &WifiChip::getAvailableModesInternal_1_6, hidl_status_cb);
 }
 
-void WifiChip::QcRemoveAndClearDynamicIfaces() {
-    for (const auto& iface : created_ap_ifaces_) {
-        std::string ifname = iface->getName();
-        legacy_hal::wifi_error legacy_status =
-            legacy_hal_.lock()->deleteVirtualInterface(ifname);
-        if (legacy_status != legacy_hal::WIFI_SUCCESS) {
-            LOG(ERROR) << "Failed to remove interface: " << ifname << " "
-                       << legacyErrorToString(legacy_status);
-        }
-    }
-
-    for (const auto& iface : created_sta_ifaces_) {
-        std::string ifname = iface->getName();
-        legacy_hal::wifi_error legacy_status =
-            legacy_hal_.lock()->deleteVirtualInterface(ifname);
-        if (legacy_status != legacy_hal::WIFI_SUCCESS) {
-            LOG(ERROR) << "Failed to remove interface: " << ifname << " "
-                       << legacyErrorToString(legacy_status);
-        }
-    }
-
-    // created_ap/sta_ifaces are also part of sta/ap_ifaces.
-    // Do no invalidate here.
-
-    created_ap_ifaces_.clear();
-    created_sta_ifaces_.clear();
-}
-
 void WifiChip::invalidateAndRemoveAllIfaces() {
-    QcRemoveAndClearDynamicIfaces();
     invalidateAndClearBridgedApAll();
     invalidateAndClearAll(ap_ifaces_);
     invalidateAndClearAll(nan_ifaces_);
@@ -999,17 +970,12 @@ std::pair<WifiStatus, sp<V1_5::IWifiApIface>> WifiChip::createApIfaceInternal()
     if (!canCurrentModeSupportConcurrencyTypeWithCurrentTypes(IfaceConcurrencyType::AP)) {
         return {createWifiStatus(WifiStatusCode::ERROR_NOT_AVAILABLE), {}};
     }
-    bool iface_created = false;
     std::string ifname = allocateApIfaceName();
-    if (!if_nametoindex(ifname.c_str())) {
-        WifiStatus status = createVirtualApInterface(ifname);
-        if (status.code != WifiStatusCode::SUCCESS) {
-            return {status, {}};
-        }
-        iface_created = true;
+    WifiStatus status = createVirtualApInterface(ifname);
+    if (status.code != WifiStatusCode::SUCCESS) {
+        return {status, {}};
     }
     sp<WifiApIface> iface = newWifiApIface(ifname);
-    if (iface_created) created_ap_ifaces_.push_back(iface);
     return {createWifiStatus(WifiStatusCode::SUCCESS), iface};
 }
 
@@ -1078,9 +1044,7 @@ WifiStatus WifiChip::removeApIfaceInternal(const std::string& ifname) {
     // nan/rtt objects over AP iface. But, there is no harm to do it
     // here and not make that assumption all over the place.
     invalidateAndRemoveDependencies(ifname);
-    if (findUsingName(created_ap_ifaces_, ifname) != nullptr) {
-        invalidateAndClear(created_ap_ifaces_, iface);
-    }
+    deleteApIface(ifname);
     invalidateAndClear(ap_ifaces_, iface);
     for (const auto& callback : event_cb_handler_.getCallbacks()) {
         if (!callback->onIfaceRemoved(IfaceType::AP, ifname).isOk()) {
@@ -1231,23 +1195,16 @@ std::pair<WifiStatus, sp<V1_6::IWifiStaIface>> WifiChip::createStaIfaceInternal(
     if (!canCurrentModeSupportConcurrencyTypeWithCurrentTypes(IfaceConcurrencyType::STA)) {
         return {createWifiStatus(WifiStatusCode::ERROR_NOT_AVAILABLE), {}};
     }
-    bool iface_created = false;
     std::string ifname = allocateStaIfaceName();
-    if (!if_nametoindex(ifname.c_str())) {
-        legacy_hal::wifi_error legacy_status =
-            legacy_hal_.lock()->createVirtualInterface(
-                ifname,
-                hidl_struct_util::convertHidlIfaceTypeToLegacy(IfaceType::STA));
-        if (legacy_status != legacy_hal::WIFI_SUCCESS) {
-            LOG(ERROR) << "Failed to add interface: " << ifname << " "
-                       << legacyErrorToString(legacy_status);
-            return {createWifiStatusFromLegacyError(legacy_status), {}};
-        }
-        iface_created = true;
+    legacy_hal::wifi_error legacy_status = legacy_hal_.lock()->createVirtualInterface(
+            ifname, hidl_struct_util::convertHidlIfaceTypeToLegacy(IfaceType::STA));
+    if (legacy_status != legacy_hal::WIFI_SUCCESS) {
+        LOG(ERROR) << "Failed to add interface: " << ifname << " "
+                   << legacyErrorToString(legacy_status);
+        return {createWifiStatusFromLegacyError(legacy_status), {}};
     }
     sp<WifiStaIface> iface = new WifiStaIface(ifname, legacy_hal_, iface_util_);
     sta_ifaces_.push_back(iface);
-    if (iface_created) created_sta_ifaces_.push_back(iface);
     for (const auto& callback : event_cb_handler_.getCallbacks()) {
         if (!callback->onIfaceAdded(IfaceType::STA, ifname).isOk()) {
             LOG(ERROR) << "Failed to invoke onIfaceAdded callback";
@@ -1280,14 +1237,10 @@ WifiStatus WifiChip::removeStaIfaceInternal(const std::string& ifname) {
     }
     // Invalidate & remove any dependent objects first.
     invalidateAndRemoveDependencies(ifname);
-    if (findUsingName(created_sta_ifaces_, ifname) != nullptr) {
-        legacy_hal::wifi_error legacy_status =
-            legacy_hal_.lock()->deleteVirtualInterface(ifname);
-        if (legacy_status != legacy_hal::WIFI_SUCCESS) {
-            LOG(ERROR) << "Failed to remove interface: " << ifname << " "
-                       << legacyErrorToString(legacy_status);
-        }
-        invalidateAndClear(created_sta_ifaces_, iface);
+    legacy_hal::wifi_error legacy_status = legacy_hal_.lock()->deleteVirtualInterface(ifname);
+    if (legacy_status != legacy_hal::WIFI_SUCCESS) {
+        LOG(ERROR) << "Failed to remove interface: " << ifname << " "
+                   << legacyErrorToString(legacy_status);
     }
     invalidateAndClear(sta_ifaces_, iface);
     for (const auto& callback : event_cb_handler_.getCallbacks()) {
@@ -1970,7 +1923,7 @@ uint32_t WifiChip::startIdxOfApIface() {
 }
 
 // AP iface names start with idx 1 for modes supporting
-// concurrent STA, else start with idx 0.
+// concurrent STA and not dual AP, else start with idx 0.
 std::string WifiChip::allocateApIfaceName() {
     // Check if we have a dedicated iface for AP.
     std::vector<std::string> ifnames = getPredefinedApIfaceNames(true);
diff --git a/wifi/1.0-legacy/wifi_chip.h b/wifi/1.0-legacy/wifi_chip.h
index 27baf3d..e8ddaa6 100644
--- a/wifi/1.0-legacy/wifi_chip.h
+++ b/wifi/1.0-legacy/wifi_chip.h
@@ -275,7 +275,6 @@ class WifiChip : public V1_6::IWifiChip {
     void deleteApIface(const std::string& if_name);
     bool findUsingNameFromBridgedApInstances(const std::string& name);
     WifiStatus triggerSubsystemRestartInternal();
-    void QcRemoveAndClearDynamicIfaces();
     std::pair<WifiStatus, sp<V1_6::IWifiRttController>> createRttControllerInternal_1_6(
             const sp<IWifiIface>& bound_iface);
     std::pair<WifiStatus, std::vector<V1_6::WifiUsableChannel>> getUsableChannelsInternal_1_6(
@@ -306,10 +305,6 @@ class WifiChip : public V1_6::IWifiChip {
 
     const std::function<void(const std::string&)> subsystemCallbackHandler_;
     std::map<std::string, std::vector<std::string>> br_ifaces_ap_instances_;
-
-    std::vector<sp<WifiApIface>> created_ap_ifaces_;
-    std::vector<sp<WifiStaIface>> created_sta_ifaces_;
-
     DISALLOW_COPY_AND_ASSIGN(WifiChip);
 };
 
-- 
2.45.2

